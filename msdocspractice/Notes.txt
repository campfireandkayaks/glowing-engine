Hello World is a string. Console.WriteLine is a method.
C# is precise and case sensitive.
Common mistakes new programmers make:

Entering lower-case letters instead of capitalizing C in Console, or the letters W or L in WriteLine
Entering a comma instead of a period between Console and WriteLine
Forgetting double-quotation marks, or using single-quotation to surround the phrase Hello World!
Forgetting a semi-colon at the end of the command
Each of these mistakes prevents your code from compiling successfully.

//Comment like this, or...

/* Multiline 
*Comments
*like
*/this.

WriteLine has a new line feed built into it.
Write does not, it just keeps writing on the same line.

compiler is a special program that converts source code
into a different format that the computer's CPU can execute.
Compiled and then executed.

Syntax includes keywords, special keyboard characters, and grammar rules
the compiler enforces. Syntax highlighting helps you find errors.

Literal string is characters within quotation marks.

WriteLine()is called a method. Methods always have a set of parenthesis after them.
The parenthesis are called the method invocation operator.

The Console part is call a class. Classes "own" methods. Or,
methods live inside of classes.

The period separates the class from the method. It is called
the member access operator. It is how you navigate from class to method.

The semicolon is the end of statement operator.
A statement is a complete instruction in C#.
The semicolon tells the complier, end of command.
So only executable code has a semicolon.?

---------Storing and retrieving data with literal and variable values-------

----String and char are for presentation----

Literal string may be used in a message to a user.
Variables are used to store data in memory as your app runs. Variables are unknowns and can be input from users.
or a variable may be a file or the internet.

Literal value is hard-coded and never changes.
String data type is used whenever you have alphanumeric values or data for presentation and not calculation.
Char literal is a data type for one character.
Char literal syntax is 'x', single quotes.
char (data type) is used for a single character.

---int and decimal are for calculations----

int literal is for whole integers +/-.
requires no special operators.

Decimal literal prints numbers with values after the decimal point.
To create a decimal literal, append the letter m after the number.
In this context m is a literal suffix.
Literal suffix tells the compiler to work with a value of the type decimal.

Without the literal suffix m, a decimal is treated as a double, which is less accurate than decimal.

----Used for evaluating expressions----

Bool literal represents true and false value.
Bool is short for boolean, and is used in decision logic in applications.
Bool is used to evaluate expressions for true or false state.

Data types are central to C#, and are there to help developers avoid common software bugs.

---DECLARING VARIABLES---
Declare a variable to work with information from outside your code.

Variable is a data item whose value may change. Its a friendly label
that we can assign to a computer memory address, we can use to temporarily store 
this information, and retrieve the value from the memory address.

To declare a variable, you have to assign a data type.
Rules to name variables:
-Names can contain alphanumeric characters, and the underscore character.
-No special characters
-must not be a C# keyword
-Case sensitive
-use camel case, thisIsCamelCase.
-be descriptive and meaningful for the app
-use whole words appended together, no contractions
-do not use the data type in the name.

----Setting and Getting----

To assign a value to a variable, you'll use the assignment operator or (=).
Setting a value does not give you output.

*Important: the C# compiler must first understand the
value on the right side of the equals sign
(assignment operator) then it can perform the
assignment to the variable on the left side
of the assignment operator. If you declare the
variable value on the left side and put the 
variable name on the right side, there will be
a compiler error.

Getting a value. Use a method to retrieve A
value with the variable name.

Reassign the value of variable. You do not 
have to recreate the variable, but you do 
have to reassign the value by setting and getting.

INITIALIZE a variable
If you do not set a variable, you will get an
error CS0165, use of unassigned local variable ' '
Its recommended to set the value asap after
declaring a variable.

To declare and set the value of a variable
in one line of code is INITIALIZING THE VARIABLE.

---Implicitly typed local variables---
C# compiler can infer you variable's data
type by it's initialized value.
This is called implicitly typed local variables
Created using the var keyword when declaring 
a data type.
Once var has set a data type, it will always
use that data type. If you enter a different
type of data into the variable you will get an
error message CS0029, cannot implicitly converts
type decimal to string. or whatever the case may be

You can only use var if the variable is 
initialized, that is declared and set in one line of code.
you will get an error message, CS0818, implicitly
typed variables have to be initialized.

Var is an important tool in C#. In advanced coding,
the data type may not be obvious at the time Its
initialized. it is recommended to type the 
actual data type for now, so you write with purpose.

----BASIC STRING FORMATTING----

C# provides many ways to combine and format data.
Learn to use character escape sequences to format 
literal strings of text to include special chars 
and even different languages using unicode. 
Learn to concatenate two strings together, and use
string interpolation to create a literal string template
with replaceable parts.

---Character Escape Sequences---
is a special instruction to the runtime
that you want to insert a special character
that will affect the output of your string.

In C# these begin with a backslash and include another 
character. 
\n will add a new line.
\t will add a tab
To insert a double quotation mark in a literal string 
\"____\"
\\ will insert a backslash

---Verbatim String Literal---
This will keep all whitespace and special chars
without the need to escape the backslash
To create a verbatim string:
-use the @ directive before the literal string.
-YOu still have to use quotation marks around the literal
-You have to use double quotation marks to keep
 the quotation marks printing around a literal:

 Console.WriteLine(@"   c:\source\repos   
      (""this is where your code goes"")");

---Unicode Escape Characters---
type \u and the 4 digit code representing some 
character in the Unicode UTF-16. UTF-32 char require A
different escape sequence not provided here
Unicode chars may not print correctly depending on the application 

----String Concantenation----

This simply means to combine two or more values
into a new value. The second value is appended to 
the end of the first value, and so on in order.

+ sign is the string concatenation operator.

Avoid creating intermediate variables if
adding them does not increase readability.
Also, aim for as few lines as possible. 

---String Interpolation---
Popular option when you have to concatenate
many literals and variables together.
It combines many values into a single literal string by 
using a "template" and one or more
interpolation expressions.
An interpolation expression is a variable
surrounded by curly braces.
The literal string becomes a template
when prefixed with the $ char.
Can use verbatim literal with string interpolation
string projectName = "First-Project";
Console.WriteLine($@"C:\Output\{projectName}\Data");

----PERFORMING BASIC FUNCTIONS ON NUMBERS----

--Addition--
Use the + addition operator 
Using this symbol for addition as well as string 
concatenation is called overloading the operator.
Overloading happens often in C#

the C# compiler parses your code and sees that the 
+ operator is surrounded by operands, or numeric
values.
Given the data type of the variables, C# compiler
sees you are intending to add values.

A parser is part of the compiler, and parsing is part of the compiling process
Parsing is the process of analyzing text to determine if it
belongs to a specific language, also called syntactic analysis.

What happens if we try to + and int and a string?
The compiler analyzes the string and int and + together
and understands that we are trying to concatenate the two
operands. It attempts to implicitly convert the int to a 
string temporarily in order to concatenate it to the 
rest of the string.

If you try to add a number in the console.writeline method to 
the int + string, it will treat everything as a string and 
place the literal number beside the int, if in that order of course.

In the same instance, if you place parenthesis around 
the int + a number in the console.writeline method, the
compiler will add the int to the number and give you an int.

the parenthesis becomes another overloaded operator. In this case it 
is the order of operations operator, like in math. After the
compiler resolves the inner parenthesis resulting in the 
addition of two ints, it implicitly converts the int result 
to a string to concatenate it with the other strings. This is 
probably something to avoid in a situation outside of learning.

+ addition operator
- subtraction operator
* multiplication operator
/ division operator (values after the decimal, or remainders are 
  truncated if the operand is defined as an int, and an int is a whole number.)
% remainder operator tells you the remainder of the int division.

---Decimal division---
The quotient left of the assignment operator (=) has to be of
the decimal data type and one or more of the operands (dividend or divisor) to
the right of the assignment operator must be 
a decimal data type, which is done by adding the
suffix 'm'.

Coding to perform literal decimal data division
What if you are not working with literal values? what if you
want to divide two ints, but do not want to truncate the
result?
---Casting---
In this case you must perform a data type cast from
int to decimal.
Casting is a data conversion that instructs the compiler 
to temporarily treat a value as if it were a different 
data type.
To cast int to decimal you add the cast operator before the
value. You can use the name of the data type
in parenthesis before the value.

Sideline: parenthesis operator overload, use as method invocation,
order of operations, and casting now.

Using the remainder operator %
//Console.WriteLine("Modulus of 200 / 5 : " + (200 % 5));
//Console.WriteLine("Modulus of 7 / 5 : " + (7 % 5));
Does not give the dividend, but does give the remainder.
Shows what numbers can be evenly divided and 
which do not.

---Order of Operations---
Parenthesis are the order of operations operators.
Whatever is in the parenthesis will be done first.
Also C# follows PEMDAS:
1. Parenthesis
2. Exponents ( except for exponents, there is no operator)
3. multiplication and division L to R
4. Addition and subtraction L to R

For exponents you can use System.Math.Pow() method, but that will 
have to be investigated later.

---Increment and Decrement Values---
Incrementing a variable is adding value to a variable.
Decrementing a variable is taking value away from it.
With no real idea of what the text is saying here, hoping for the best later on:
Incrementing and decrementing a value is useful when you
work with any looping logic, or code that interacts with 
a data structure, which houses multiple elements of data.

Compound assignment operators examples: +=, -=, *=, ++, -- 
The += is specifically known as the addition assignment
operator.
These compound some operation in addition to assigning the result 
to the variable.
//int value = 0;
//value = value + 5; This line means the same as the next, and 
//value += 5;         if you console.writelined (value) the
                      answer would be 10.
//int value = 0;
//value = value + 1;
//value++;
The last two lines mean the same thing. The output would be 2.
You can do the same thing with subtraction and multiplication,
but the guide is not specific if you can divide in this manner
as well.

The position you use the increment or decrement operator matters
++value is different than value++. ++value the increment
happens before the value is retrieved; value++, the increment
happens after the value is retrieved.












